---
title: "Palmer Penguins"
author: "Cobblepot Analytics"
format: 
  dashboard:
    #logo: images/penguins.png
    nav-buttons: [linkedin, twitter, github]
    scrolling: true
---

blood_pressure_start_time
ecbq_collected_yn
blood_pressure_start_time

```{r}
library(dplyr)
library(readr)
library(lubridate)

# Read the CSV file
data <- read_csv("2024MarBiospec.csv")

# Inspect the first few rows of the dataset to ensure it's read correctly
print(head(data))

# Check unique values in 'site_name' and 'redcap_event_name' to ensure filtering conditions are correct
print(unique(data$site_name))
print(unique(data$redcap_event_name))

# Apply filter and select specified columns
filtered_data <- data %>%
    filter(site_name == "FIU", redcap_event_name == "5_year_follow_up_y_arm_1") %>%
    select(id_redcap, redcap_event_name, site_name, asnt_timestamp, hair_status_y, dna_blood_y, teeth_donated_1_p)


# Check if filtered_data is empty
if (nrow(filtered_data) == 0) {
    print("No rows match the filtering criteria.")
} else {
    # Recode variables as specified
    filtered_data <- filtered_data %>%
        mutate(
            asnt_timestamp = as.Date(asnt_timestamp),
            week = floor_date(asnt_timestamp, unit = "week"),
            hair_status_y = if_else(hair_status_y == 2, 1, 0),
            dna_blood_y = if_else(dna_blood_y == 1, 1, 0),
            teeth_donated_1_p = if_else(teeth_donated_1_p == "yes", 1, 0)
        )

    # Save the modified dataframe
    write_csv(filtered_data, "Modified2024MarBiospec_Recoded.csv")
}


```

<!-- ```{r}

library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyr) # Make sure to load the tidyr package
library(readr)

# Assuming data has already been read and prepared
data <- read_csv("Modified2024MarBiospec_Recoded.csv")

# Convert 'asnt_timestamp' to Date format
data$asnt_timestamp <- as.Date(data$asnt_timestamp)

# Prepare the data: Aggregate counts by week for each variable using pivot_longer
data_weekly <- data %>%
    mutate(week = floor_date(asnt_timestamp, unit = "week")) %>%
    pivot_longer(cols = c(hair_status_y, dna_blood_y, teeth_donated_1_p), names_to = "variable", values_to = "value") %>%
    filter(value == 1) %>%
    group_by(week, variable) %>%
    summarise(count = n(), .groups = "drop")

# Plotting
ggplot(data_weekly, aes(x = week, y = count, color = variable)) +
    geom_line() +
    geom_point() +
    labs(
        title = "Weekly Count of 'Yes' Responses by Variable",
        x = "Week",
        y = "Count of 'Yes' Responses",
        color = "Variable"
    ) +
    theme_minimal() +
    scale_color_manual(values = c("hair_status_y" = "blue", "dna_blood_y" = "green", "teeth_donated_1_p" = "red"))



``` -->





-------

## Row {height=70%}

```{r}
library(palmerpenguins)
library(ggplot2)

# Basic bar chart of penguin species count
ggplot(data = penguins, aes(x = species)) +
    geom_bar(fill = "steelblue") +
    theme_minimal() +
    labs(title = "Count of Penguin Species", x = "Species", y = "Count")
```

## Row {height=30%}

```{r}
# Basic scatter plot of flipper length vs body mass
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
    geom_point(alpha = 0.7) +
    theme_minimal() +
    labs(title = "Flipper Length vs Body Mass by Species", x = "Flipper Length (mm)", y = "Body Mass (g)")

```

```{r}
# Histogram of penguin body mass
ggplot(data = penguins, aes(x = body_mass_g)) +
    geom_histogram(fill = "darkgreen", bins = 30) +
    theme_minimal() +
    labs(title = "Histogram of Penguin Body Mass", x = "Body Mass (g)", y = "Frequency")

```


## Frequency Table of Variable1

```{r}

library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyr) # Make sure to load the tidyr package
library(readr)

# Assuming data has already been read and prepared
data <- read_csv("Modified2024MarBiospec_Recoded.csv")

# Convert 'asnt_timestamp' to Date format
data$asnt_timestamp <- as.Date(data$asnt_timestamp)

# Prepare the data: Aggregate counts by week for each variable using pivot_longer
data_weekly <- data %>%
    mutate(week = floor_date(asnt_timestamp, unit = "week")) %>%
    pivot_longer(cols = c(hair_status_y, dna_blood_y, teeth_donated_1_p), names_to = "variable", values_to = "value") %>%
    filter(value == 1) %>%
    group_by(week, variable) %>%
    summarise(count = n(), .groups = "drop")

# Plotting
ggplot(data_weekly, aes(x = week, y = count, color = variable)) +
    geom_line() +
    geom_point() +
    labs(
        title = "Weekly Count of 'Yes' Responses by Variable",
        x = "Week",
        y = "Count of 'Yes' Responses",
        color = "Variable"
    ) +
    theme_minimal() +
    scale_color_manual(values = c("hair_status_y" = "red", "dna_blood_y" = "green", "teeth_donated_1_p" = "blue"))

```

<!-- --- 
title: "Palmer Penguins"
author: "Cobblepot Analytics"
format: 
  dashboard:
    #logo: images/penguins.png
    nav-buttons: [linkedin, twitter, github]
    scrolling: true
---


## Row {height=70%}

```{r}
```

## Row {height=30%}

```{r}
```

```{r}
```


---

# Bills 

```{r}
```

# Flippers {orientation="columns" scrolling="true"}

## Column

```{r}
```

```{r}
```

## Column 

```{r}
```

---

## Row

```{r}
```

## Row {.tabset}

```{r}
#| title: Chart 2
```

```{r}
#| title: Chart 3
```

---

## Row {height=70%}

```{r}
```

## Row {height=30%}

### Column {.tabset}

```{r}
#| title: Chart 2
```

```{r}
#| title: Chart 3
```

### Column

```{r}
```

::: {.card title="My Title"}
Card text 
:::

## Row {.tabset}

### Plots

```{r}
```

```{r}
```

### Data

```{r}
```

## Column {width=40%}

```{r}
```

```{r}
```

## Column {width=40%}

```{r}
```

::: {.card}
This text will be displayed within a card
:::

```{r}
```

::: {.card title="My Title"}
This text will be displayed within a card
:::



```
------------
------------
------------


    
    
```{r}

library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyr) # Make sure to load the tidyr package
library(readr)

# Assuming data has already been read and prepared
data <- read_csv("Modified2024MarBiospec_Recoded.csv")

# Convert 'asnt_timestamp' to Date format
data$asnt_timestamp <- as.Date(data$asnt_timestamp)

# Prepare the data: Aggregate counts by week for each variable using pivot_longer
data_weekly <- data %>%
    mutate(week = floor_date(asnt_timestamp, unit = "week")) %>%
    pivot_longer(cols = c(hair_status_y, dna_blood_y, teeth_donated_1_p), names_to = "variable", values_to = "value") %>%
    filter(value == 1) %>%
    group_by(week, variable) %>%
    summarise(count = n(), .groups = "drop")

# Plotting
ggplot(data_weekly, aes(x = week, y = count, color = variable)) +
    geom_line() +
    geom_point() +
    labs(
        title = "Weekly Count of 'Yes' Responses by Variable",
        x = "Week",
        y = "Count of 'Yes' Responses",
        color = "Variable"
    ) +
    theme_minimal() +
    scale_color_manual(values = c("hair_status_y" = "blue", "dna_blood_y" = "green", "teeth_donated_1_p" = "red"))



```