---
title: "git-onboarding"
---

https://swcarpentry.github.io/git-novice/10-open.html
https://guides.nyu.edu/data_management/version-control
https://www.ucl.ac.uk/advanced-research-computing/expertise/research-software-development/research-software-development-tools/support-ucl-researchers
https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/2041-210X.14108
https://www.ccdatalab.org/blog/git-workflows-for-scientific-projects-and-when-we-use-them
https://github.blog/2022-07-20-heres-how-academic-research-is-shaping-github-discussions/
https://www.uu.nl/en/research/research-data-management/tools/software-and-computing/github-and-git
https://neurathsboat.blog/post/git-intro/
https://www.knowledgehut.com/blog/data-science/github-for-data-science

https://www.kdnuggets.com/2022/11/git-data-science-cheatsheet.html

https://www.ben-johnston.co.uk/git-for-data-analysts-the-complete-guide/
https://www.linkedin.com/pulse/how-set-up-maintain-sop-repository-documentation-shafayetul-islam

https://tilburgsciencehub.com/building-blocks/configure-your-computer/infrastructure-choice/configure-git/
https://course.ccs.neu.edu/cs3500/labs_git_lab.html

https://ourcodingclub.github.io/tutorials/git-for-labs/

https://happygitwithr.com/index.html








IDEs (Rstudio vs VScode)

zotero

bibtex; https://retorque.re/zotero-better-bibtex/citing/

https://happygitwithr.com/index.html

https://youtu.be/RGOj5yH7evk

sunlab readme (for all "folders"?)

https://guides.library.upenn.edu/datamgmt/fileorg

https://files.nccih.nih.gov/s3fs-public/CR-Toolbox/Version_Control_Guidelines_ver2_07-17-2015.pdf

https://repository.upenn.edu/entities/publication/4716fa55-e397-4765-9aa8-12311b5acac4

https://ourcodingclub.github.io/tutorials/git-for-labs/

steps for our lab

common commands

vscode/rstudio

https://swcarpentry.github.io/git-novice/

https://missing.csail.mit.edu/2020/version-control/

https://lab.github.com/githubtraining/introduction-to-github

https://youtu.be/U8GBXvdmHT4

https://m.youtube.com/playlist?list=PL4cUxeGkcC9goXbgTDQ0n_4TBzOO0ocPR

directory structure

naming conventions


"A repo with a very good README and clear documentation, frequent high-quality issues/PRs, and clear concern for best practices (like, not committing secrets or large files, CI/CD if necessary, unit tests) is way more important than a specific folder structure.

Bioinformatics (and academia more broadly) suffers greatly from software that is pure dog water. I think a hiring manager would be more interested in your ability to produce maintainable, robust, high-quality software and write strong, technical documentation and result reporting that describes how you did your analysis over the nuances of how you name your folders."

I agree, a good readme is critical and often a good indicator of a well-tracked repo. You will thank yourself later in the future as well for having well-documented, reproducible code.


Don't put data or output in your repo, just scripts. Have your Readme summarize each script, and the order they should be run if applicable.

If you really want to show output, have an html from an rmd output.


As a beginner, what setup currently works for me is:

Initialize a Git repository

Create folders data, results, scripts and notebooks (nowadays I also create a reports folder to store RMarkdown reports, but that may be a subject of taste). Put the contents of data and results folders into .gitignore. Thus, only the code and documentation are versioned (however, the structure inside the data folders also matters for code readability)

I start the analysis in notebooks. Once a chunk of workflow (e.g., sample QC) is completed, I refactor the code, test it again and separate the logical parts into individual scripts. Then I test that sequence of scripts. If everything works fine, I delete the notebook (I personally do not like how notebooks interact with Git. If I want to showcase the code together with the results, I prefer RMarkdown)

Right now I'm working on improving my documentation practices. I think going with a README with a general description of the project, outline of main steps in your scripts and their order (e.g., PROJECT.md) and DATA.md which summarizes where you got the data you use

Private repos. You could also set up a Jupyter-book with collaborators.

If you are a student, register for a student acct.

Others have mentioned that if you use a private repo, you should avoid uploading actual data files to the github. This is the .gitignore file I use to ensure that:

https://learngitbranching.js.org/

https://git-scm.com/book/en/v2

Other lab resources
r
tidyverse
wickham
easystats
how to use















