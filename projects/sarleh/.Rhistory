bold_labels() %>%
italicize_levels() %>%
modify_spanning_header(all_stat_cols() ~ "**Assessment Wave**")
theme_gtsummary_compact()
descriptives_table
descriptives_table <- df_long %>%
select(event, handedness, height) %>%
mutate(event = factor(event)) %>%
mutate(handedness = factor(handedness, labels = c("Right", "Left"))) %>%
tbl_summary(
by = event,
missing = "no",
label = list(handedness ~ "Handedness", height ~ "Height"),
statistic = list(all_continuous() ~ "{mean} ({sd}) )", all_categorical() ~ "{p}%"),
) %>%
modify_header(all_stat_cols() ~ "**{level}**<br>N = {n}") %>%
bold_labels() %>%
italicize_levels() %>%
modify_spanning_header(all_stat_cols() ~ "**Assessment Wave**")
theme_gtsummary_compact()
descriptives_table
descriptives_table <- df_long %>%
select(event, handedness, height) %>%
mutate(event = factor(event)) %>%
mutate(handedness = factor(handedness)) %>%
tbl_summary(
by = event,
missing = "no",
label = list(handedness ~ "Handedness", height ~ "Height"),
statistic = list(all_continuous() ~ "{mean} ({sd}) )", all_categorical() ~ "{p}%"),
) %>%
modify_header(all_stat_cols() ~ "**{level}**<br>N = {n}") %>%
bold_labels() %>%
italicize_levels() %>%
modify_spanning_header(all_stat_cols() ~ "**Assessment Wave**")
theme_gtsummary_compact()
descriptives_table
df_wide <- df_long %>%
pivot_wider(
names_from = event,
values_from = height,
names_prefix = "height_"
)
View(df_wide)
df_wide <- df_wide %>%
mutate(
height_diff = Height_Baseline - Height_Year_1
)
df_wide <- df_long %>%
pivot_wider(
names_from = event,
values_from = height,
names_prefix = "Height_"
)
df_wide <- df_wide %>%
mutate(
height_diff = Height_Baseline - Height_Year_1
)
used in your dataset
df_wide <- df_wide %>%
mutate(
height_diff = Height_Year_1 - Height_Baseline
)
# Calculate summary statistics for the difference score
summary_stats <- summary(df_wide$height_diff)
print(summary_stats)
}
df_wide <- df_wide %>%
mutate(
height_diff = Height_Year_1 - Height_Baseline
)
# Calculate summary statistics for the difference score
summary_stats <- summary(df_wide$height_diff)
print(summary_stats)
summary <- df_long %>%
group_by(event) %>%
get_summary_stats(height, type = "mean_sd")
data.frame(summary)
#| class.source: 'fold-hide'
#| message: FALSE
#| warning: FALSE
#| echo: TRUE
# Merge the 'sex' variable from the original dataframe 'df' to 'height_diff_data'
merged_data <- height_diff_data %>%
left_join(df %>% select(id, handedness), by = "id")
merged_data <- height_diff %>%
left_join(df %>% select(id, handedness), by = "id")
# Run the regression
model <- lm(diff ~ handedness, data = df_wide)
# Run the regression
model <- lm(handedness ~ handedness, data = df_wide)
# Get the summary of the regression model
model_summary <- summary(model)
model_summary
# Run the regression
model <- lm(handedness ~ handedness, data = df_wide, na.action = na.omit)
# Get the summary of the regression model
model_summary <- summary(model)
# Run the regression
model <- lm(height ~ handedness, data = df_wide, na.action = na.omit)
# Run the regression
model <- lm(height_diff ~ handedness, data = df_wide, na.action = na.omit)
# Get the summary of the regression model
model_summary <- summary(model)
model_summary
merged_data <- height_diff %>%
left_join(df_long %>% select(id, handedness), by = "id")
# Plotting using ggplot2
ggplot(df_long, aes(x = handedness, y = height_diff, fill = handedness)) +
geom_violin() +
geom_jitter(position = position_jitter(width = 0.2), size = 1, alpha = 0.5) +
scale_fill_brewer(palette = "Set2") +
labs(
title = "Difference Scores by Handedness",
x = "Handedness",
y = "Height Difference Score"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
)
# Plotting using ggplot2
ggplot(df_long, aes(x = handedness, y = height, fill = handedness)) +
geom_violin() +
geom_jitter(position = position_jitter(width = 0.2), size = 1, alpha = 0.5) +
scale_fill_brewer(palette = "Set2") +
labs(
title = "Difference Scores by Handedness",
x = "Handedness",
y = "Height Difference Score"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
)
df_long <- df %>%
select(src_subject_id, eventname, ehi_y_ss_scoreb, anthroheightcalc) %>%
filter(eventname %in% c("baseline_year_1_arm_1", "1_year_follow_up_y_arm_1")) %>%
drop_na(anthroheightcalc) %>%
arrange(src_subject_id, eventname) %>%
group_by(src_subject_id) %>%
fill(ehi_y_ss_scoreb, .direction = "downup") %>%
ungroup() %>%
filter(ehi_y_ss_scoreb %in% c(1, 2)) %>%
mutate(
src_subject_id = factor(src_subject_id),
eventname = factor(eventname,levels = c("baseline_year_1_arm_1", "1_year_follow_up_y_arm_1"), labels = c("Baseline", "Year_1")),
ehi_y_ss_scoreb = factor(ehi_y_ss_scoreb, levels = c(1, 2), labels = c("Right", "Left")),
anthroheightcalc = round(as.numeric(anthroheightcalc), 2)
) %>%
rename(
id = src_subject_id,
event = eventname,
handedness = ehi_y_ss_scoreb,
height = anthroheightcalc
)
descriptives_table <- df_long %>%
select(event, handedness, height) %>%
mutate(event = factor(event)) %>%
mutate(handedness = factor(handedness)) %>%
tbl_summary(
by = event,
missing = "no",
label = list(handedness ~ "Handedness", height ~ "Height"),
statistic = list(all_continuous() ~ "{mean} ({sd}) )", all_categorical() ~ "{p}%"),
) %>%
modify_header(all_stat_cols() ~ "**{level}**<br>N = {n}") %>%
bold_labels() %>%
italicize_levels() %>%
modify_spanning_header(all_stat_cols() ~ "**Assessment Wave**")
theme_gtsummary_compact()
descriptives_table
#| message: FALSE
#| warning: FALSE
#| echo: TRUE
#| class.source: 'fold-hide'
# Reshape data from long to wide format
df_wide <- df_long %>%
pivot_wider(
names_from = event,
values_from = height,
names_prefix = "Height_"
)
# Compute the height difference
# Replace 'baseline_year_1_arm_1' and '1_year_follow_up_y_arm_1' with the exact names used in your dataset
df_wide <- df_wide %>%
mutate(
height_diff = Height_Year_1 - Height_Baseline
)
# Calculate summary statistics for the difference score
summary_stats <- summary(df_wide$height_diff)
print(summary_stats)
## Summary statistics
# Compute summary statistics for Height by eventname
summary <- df_long %>%
group_by(event) %>%
get_summary_stats(height, type = "mean_sd")
data.frame(summary)
# Run the regression
model <- lm(height_diff ~ handedness, data = df_wide)
# Get the summary of the regression model
model_summary <- summary(model)
model_summary
# Visualize the difference scores across different levels of handedness
# Create a violin plot to show the distribution of difference scores by sex
# Jittered points are added to provide a more granular view of individual observations
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Plotting using ggplot2
ggplot(df_long, aes(x = handedness, y = height, fill = handedness)) +
geom_violin() +
geom_jitter(position = position_jitter(width = 0.2), size = 1, alpha = 0.5) +
scale_fill_brewer(palette = "Set2") +
labs(
title = "Difference Scores by Handedness",
x = "Handedness",
y = "Height Difference Score"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
)
rm(list=ls())
#| echo: FALSE # The content of this code block will not be shown when rendered
#| output: FALSE # Output from this code block will not be shown when rendered
# This code configures knitr code chunk options
knitr::opts_chunk$set(echo = T, message=F, warning=F, error=F, output=T,
comment=NA, cache=T, code_folding=T,
R.options=list(width=220, digits = 3),
fig.align='center',
out.width='75%', fig.asp=.75)
#| echo: FALSE # The content of this code block will not be shown when rendered
#| output: FALSE # Output from this code block will not be shown when rendered
#| cache: FALSE
# This code loads the data to be used for the example
library(tidyverse)
# Set the data path
data_path <- "/Users/shawes/ABCD/data/rds/abcd_5.0_rds/core-rds-5.0/non-imaging_excluding_nt_5.0.rds"
# Read the data
df <- readRDS(data_path)
# Create and mutate the dataframe
df_long <- df %>%
select(src_subject_id, eventname, ehi_y_ss_scoreb, anthroheightcalc) %>%
filter(eventname %in% c("baseline_year_1_arm_1", "1_year_follow_up_y_arm_1")) %>%
drop_na(anthroheightcalc) %>%
arrange(src_subject_id, eventname) %>%
group_by(src_subject_id) %>%
fill(ehi_y_ss_scoreb, .direction = "downup") %>%
ungroup() %>%
filter(ehi_y_ss_scoreb %in% c(1, 2)) %>%
mutate(
src_subject_id = factor(src_subject_id),
eventname = factor(eventname,levels = c("baseline_year_1_arm_1", "1_year_follow_up_y_arm_1"), labels = c("Baseline", "Year_1")),
ehi_y_ss_scoreb = factor(ehi_y_ss_scoreb, levels = c(1, 2), labels = c("Right", "Left")),
anthroheightcalc = round(as.numeric(anthroheightcalc), 2)
) %>%
rename(
id = src_subject_id,
event = eventname,
handedness = ehi_y_ss_scoreb,
height = anthroheightcalc
)
library(tidyverse)    # Collection of R packages for data science
library(gtsummary)    # Publication-ready tables
library(rstatix)      # Statistical Tests in tidy format
descriptives_table <- df_long %>%
select(event, handedness, height) %>%
mutate(event = factor(event)) %>%
mutate(handedness = factor(handedness)) %>%
tbl_summary(
by = event,
missing = "no",
label = list(handedness ~ "Handedness", height ~ "Height"),
statistic = list(all_continuous() ~ "{mean} ({sd}) )", all_categorical() ~ "{p}%"),
) %>%
modify_header(all_stat_cols() ~ "**{level}**<br>N = {n}") %>%
bold_labels() %>%
italicize_levels() %>%
modify_spanning_header(all_stat_cols() ~ "**Assessment Wave**")
theme_gtsummary_compact()
descriptives_table
# Reshape data from long to wide format
df_wide <- df_long %>%
pivot_wider(
names_from = event,
values_from = height,
names_prefix = "Height_"
)
# Compute the height difference
# Replace 'baseline_year_1_arm_1' and '1_year_follow_up_y_arm_1' with the exact names used in your dataset
df_wide <- df_wide %>%
mutate(
height_diff = Height_Year_1 - Height_Baseline
)
# Calculate summary statistics for the difference score
summary_stats <- summary(df_wide$height_diff)
print(summary_stats)
## Summary statistics
# Compute summary statistics for Height by eventname
summary <- df_long %>%
group_by(event) %>%
get_summary_stats(height, type = "mean_sd")
data.frame(summary)
# Run the regression
model <- lm(height_diff ~ handedness, data = df_wide)
# Get the summary of the regression model
model_summary <- summary(model)
model_summary
# Visualize the difference scores across different levels of handedness
# Create a violin plot to show the distribution of difference scores by sex
# Jittered points are added to provide a more granular view of individual observations
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Plotting using ggplot2
ggplot(df_long, aes(x = handedness, y = height, fill = handedness)) +
geom_violin() +
geom_jitter(position = position_jitter(width = 0.2), size = 1, alpha = 0.5) +
scale_fill_brewer(palette = "Set2") +
labs(
title = "Difference Scores by Handedness",
x = "Handedness",
y = "Height Difference Score"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
)
#| output: FALSE # Output from this code block will not be shown when rendered
#| cache: FALSE
#| code-fold: true
# This code loads the data to be used for the example
library(tidyverse)
# Set the data path
data_path <- "/Users/shawes/ABCD/data/rds/abcd_5.0_rds/core-rds-5.0/non-imaging_excluding_nt_5.0.rds"
# Read the data
df <- readRDS(data_path)
# Create and mutate the dataframe
df_long <- df %>%
select(src_subject_id, eventname, ehi_y_ss_scoreb, anthroheightcalc) %>%
filter(eventname %in% c("baseline_year_1_arm_1", "1_year_follow_up_y_arm_1")) %>%
drop_na(anthroheightcalc) %>%
arrange(src_subject_id, eventname) %>%
group_by(src_subject_id) %>%
fill(ehi_y_ss_scoreb, .direction = "downup") %>%
ungroup() %>%
filter(ehi_y_ss_scoreb %in% c(1, 2)) %>%
mutate(
src_subject_id = factor(src_subject_id),
eventname = factor(eventname,levels = c("baseline_year_1_arm_1", "1_year_follow_up_y_arm_1"), labels = c("Baseline", "Year_1")),
ehi_y_ss_scoreb = factor(ehi_y_ss_scoreb, levels = c(1, 2), labels = c("Right", "Left")),
anthroheightcalc = round(as.numeric(anthroheightcalc), 2)
) %>%
rename(
id = src_subject_id,
event = eventname,
handedness = ehi_y_ss_scoreb,
height = anthroheightcalc
)
rm(list = ())
rm(list=ls())
#| echo: FALSE # The content of this code block will not be shown when rendered
#| output: FALSE # Output from this code block will not be shown when rendered
# This code configures knitr code chunk options
knitr::opts_chunk$set(
echo = T, message = F, warning = F, error = F, output = T,
comment = NA, cache = T, code_folding = T,
R.options = list(width = 220, digits = 3),
fig.align = "center",
out.width = "75%", fig.asp = .75
)
#| echo: FALSE # The content of this code block will not be shown when rendered
#| output: FALSE # Output from this code block will not be shown when rendered
#| cache: FALSE
# This code loads the data to be used for the example
library(tidyverse)
# Set the data path
data_path <- "/Users/shawes/ABCD/data/rds/abcd_5.0_rds/core-rds-5.0/non-imaging_excluding_nt_5.0.rds"
# Read the data
df <- readRDS(data_path)
# Create and mutate the dataframe
df_long <- df %>%
select(src_subject_id, eventname, ehi_y_ss_scoreb, anthroheightcalc) %>%
filter(eventname %in% c("baseline_year_1_arm_1", "1_year_follow_up_y_arm_1")) %>%
drop_na(anthroheightcalc) %>%
arrange(src_subject_id, eventname) %>%
group_by(src_subject_id) %>%
fill(ehi_y_ss_scoreb, .direction = "downup") %>%
ungroup() %>%
filter(ehi_y_ss_scoreb %in% c(1, 2)) %>%
mutate(
src_subject_id = factor(src_subject_id),
eventname = factor(eventname, levels = c("baseline_year_1_arm_1", "1_year_follow_up_y_arm_1"), labels = c("Baseline", "Year_1")),
ehi_y_ss_scoreb = factor(ehi_y_ss_scoreb, levels = c(1, 2), labels = c("Right", "Left")),
anthroheightcalc = round(as.numeric(anthroheightcalc), 2)
) %>%
rename(
id = src_subject_id,
event = eventname,
handedness = ehi_y_ss_scoreb,
height = anthroheightcalc
)
library(tidyverse) # Collection of R packages for data science
library(gtsummary) # Publication-ready tables
library(rstatix) # Statistical Tests in tidy format
descriptives_table <- df_long %>%
select(event, handedness, height) %>%
mutate(event = factor(event)) %>%
mutate(handedness = factor(handedness)) %>%
tbl_summary(
by = event,
missing = "no",
label = list(handedness ~ "Handedness", height ~ "Height"),
statistic = list(all_continuous() ~ "{mean} ({sd}) )", all_categorical() ~ "{p}%"),
) %>%
modify_header(all_stat_cols() ~ "**{level}**<br>N = {n}") %>%
bold_labels() %>%
italicize_levels() %>%
modify_spanning_header(all_stat_cols() ~ "**Assessment Wave**")
theme_gtsummary_compact()
descriptives_table
# Reshape data from long to wide format
df_wide <- df_long %>%
pivot_wider(
names_from = event,
values_from = height,
names_prefix = "Height_"
)
# Compute the height difference
# Replace 'baseline_year_1_arm_1' and '1_year_follow_up_y_arm_1' with the exact names used in your dataset
df_wide <- df_wide %>%
mutate(
height_diff = Height_Year_1 - Height_Baseline
)
# Calculate summary statistics for the difference score
summary_stats <- summary(df_wide$height_diff)
print(summary_stats)
## Summary statistics
# Compute summary statistics for Height by eventname
summary <- df_long %>%
group_by(event) %>%
get_summary_stats(height, type = "mean_sd")
data.frame(summary)
# qqPlot(gaze_residual$group_resid)
# shapiro.test(gaze_residual$group_resid)
## Summary statistics
# Compute summary statistics for Height by eventname
summary <- df_long %>%
group_by(event) %>%
get_summary_stats(height, type = "mean_sd")
data.frame(summary)
# qqPlot(gaze_residual$group_resid)
# shapiro.test(gaze_residual$group_resid)
model <- t.test(height_diff, mu = 0, data = df_wide)
View(df_wide)
model1 <- t.test(df_wide$height_diff, mu = 0)
model2 <- df_wide %>% t_test(height_diff ~ 1, mu = 0)
model1
model2
model1
model <- df_wide %>% t_test(height_diff ~ 1, mu = 0)
model
gaze_test <- t.test(height_diff ~ event,
paired = TRUE,
data = df_wide
) %>%
tidy()
View(df_long)
gaze_test <- t.test(height ~ event,
paired = TRUE,
data = df_long
) %>%
tidy()
# Perform a one-sample t-test on the difference scores for height
model <- t.test(df_wide$height_diff, mu = 0)
model
# Create scatterplot
library(ggplot2)
# Scatterplot to compare height differences across two events
ggplot(df_wide, aes(x = Height_Baseline, y = Height_Year_1)) +
geom_point(aes(color = event_1), alpha = 0.6) +   # Color points by event type, adjust for your data
labs(
x = "Height at Baseline",
y = "Height at Year 1",
title = "Scatterplot of Heights at Baseline and Year 1",
subtitle = "Each point represents a participant"
) +
theme_minimal() +
geom_smooth(method = "lm", se = FALSE) +  # Add a regression line without confidence interval
theme(legend.position = "bottom")
# Create scatterplot
library(ggplot2)
# Scatterplot to compare height differences across two events
ggplot(df_wide, aes(x = Height_Baseline, y = Height_Year_1)) +
geom_point(aes(color = Height_Baseline), alpha = 0.6) +   # Color points by event type, adjust for your data
labs(
x = "Height at Baseline",
y = "Height at Year 1",
title = "Scatterplot of Heights at Baseline and Year 1",
subtitle = "Each point represents a participant"
) +
theme_minimal() +
geom_smooth(method = "lm", se = FALSE) +  # Add a regression line without confidence interval
theme(legend.position = "bottom")
rm(list=ls())
